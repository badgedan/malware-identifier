import hashlib
from datetime import datetime
import argparse
import requests

try:
  parser = argparse.ArgumentParser(prog='Malware Identifer', 
                                   description='Identify given files either malicious or not based on our database and other 3rd parties)
  parser.add_argument('filename')
  parser.add_argument('--hash',dest='parsed_hash',choices=['md5','sha256','sha512'], action='store',required=True)
  parser.add_argument('--apikey',dest='apikey', action='store',required=False)
except Exception as e:
  print(f"[X] Error: {e}")
args=parser.parse_args()

# Virus total's API setup
api_key=args.apikey 
url="https://www.virustotal.com/api/v3/files/"
headers = {"accept": "application/json",
           "x-apikey":api_key}
def logger(func):
  def wrapper():
    print('-'*50)
    print(f'[>>] Execution started at {datetime.now()}')
    func()
    print(f'[>>] Execution ended at {datetime.now()}')
  return wrapper

@logger
def execute():
  hash_list = ['md5','sha256','sha512']
  with open('hashes.txt') as malware_samples:
    samples_list=malware_samples.read().splitlines()

  entered_sample=args.filename
  entered_hash=args.parsed_hash
  with open(f'{entered_sample}','rb') as entered_sample_handler:
    sample_file=entered_sample_handler.read()
  
  found = False
  print(f"[>>] Trying with {entered_hash}..")
  sample_hash=hashlib.new(f'{entered_hash}')
  sample_hash.update(sample_file)
  sample_hash=sample_hash.hexdigest()
  for sample in samples_list:
      if sample_hash == sample:
        print("[>>] Found! The file provided is malicious.")
        print(f'[>>] {entered_sample} {sample_hash}')
        found=True
        break

  if not found:
    malicious=False
    hash_list.remove('md5')
    for hash_type in hash_list:
      sample_hash=hashlib.new(f'{hash_type}')
      sample_hash.update(sample_file)
      sample_hash=sample_hash.hexdigest()
      print(f"[>>] Trying with {hash_type}..")
      for sample in samples_list:
          if sample_hash == sample:
            print("[>>] Found! The file provided is malicious.")
            print(f'[>>] {entered_sample} {sample_hash}')
            malicious=True
            break
      if not malicious:
        print("[>>] Not found! We couldn't find the file in our database.")      

  if api_key:
      response = requests.get(url+sample_hash, headers=headers)
      if response.status_code==404:
        print("[>>] Not found in the VirusTotal database!")
      elif response.status_code==200:
        result=response.json()
        v_file_name=str(result['data']['attributes']['meaningful_name']).strip('[\']')
        v_votes_harmless=result['data']['attributes']['total_votes']['harmless']
        v_votes_malicious=result['data']['attributes']['total_votes']['malicious']
        print(f"Filename: {v_file_name}")
        print(f"Harmless votes: {v_votes_harmless}")
        print(f"Malicious votes: {v_votes_malicious}")
        if v_votes_malicious>10:
          print("[>>] This file seems to be malicious, take proper caution!")
        elif v_votes_malicious>20:
          print("[>>] This file is malicious, take proper caution!")              


execute()
